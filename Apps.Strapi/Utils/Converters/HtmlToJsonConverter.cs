using Apps.Strapi.Constants;
using Apps.Strapi.Models.Records;
using Blackbird.Applications.Sdk.Common.Exceptions;
using HtmlAgilityPack;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System.Web;

namespace Apps.Strapi.Utils.Converters;

public static class HtmlToJsonConverter
{
    public static HtmlMetadata ExtractMetadata(string metadata)
    {
        var doc = new HtmlDocument();
        doc.LoadHtml(metadata);

        var contentIdNode = doc.DocumentNode.SelectSingleNode($"//meta[@name='{MetadataKeys.ContentId}']");
        var contentTypeIdNode = doc.DocumentNode.SelectSingleNode($"//meta[@name='{MetadataKeys.ContentType}']");
        var languageNode = doc.DocumentNode.SelectSingleNode($"//meta[@name='{MetadataKeys.Locale}']");
        if (contentIdNode != null && contentTypeIdNode != null && languageNode != null)
        {
            var contentId = contentIdNode.GetAttributeValue("content", string.Empty);
            var contentTypeId = contentTypeIdNode.GetAttributeValue("content", string.Empty);
            var language = languageNode.GetAttributeValue("content", string.Empty);

            return new HtmlMetadata(contentId, contentTypeId, language);
        }

        throw new PluginApplicationException("HTML does not contain a valid source path meta tag. Make sure the HTML is generated by the connector.");
    }

    public static string ConvertToJson(string html)
    {
        var doc = new HtmlDocument();
        doc.LoadHtml(html);

        var bodyNode = doc.DocumentNode.SelectSingleNode("//body");
        if (bodyNode == null)
        {
            throw new PluginApplicationException("HTML document does not contain a body tag");
        }

        var originalJsonEncoded = bodyNode.GetAttributeValue("original", string.Empty);
        if (string.IsNullOrEmpty(originalJsonEncoded))
        {
            throw new PluginApplicationException("HTML does not contain the original JSON data");
        }

        var originalJson = HttpUtility.HtmlDecode(originalJsonEncoded);
        var jsonObj = JsonConvert.DeserializeObject<JObject>(originalJson);

        if (jsonObj == null)
        {
            throw new PluginApplicationException("Failed to parse original JSON data");
        }

        ProcessPropertyValues(doc, jsonObj);
        ProcessRichTextContent(doc, jsonObj);

        var dataObj = jsonObj["data"] as JObject;
        if (dataObj == null)
        {
            throw new PluginApplicationException("Invalid JSON structure: missing 'data' property");
        }

        foreach (var property in JsonProperties.NonLocalizableProperties)
        {
            if (dataObj.ContainsKey(property))
            {
                dataObj.Remove(property);
            }
        }

        return JsonConvert.SerializeObject(new { data = dataObj });
    }

    private static void ProcessPropertyValues(HtmlDocument doc, JObject jsonObj)
    {
        var propertyValueNodes = doc.DocumentNode.SelectNodes("//span[@class='property-value']");
        if (propertyValueNodes == null)
            return;

        foreach (var node in propertyValueNodes)
        {
            var jsonPath = node.GetAttributeValue("data-json-path", string.Empty);
            if (string.IsNullOrEmpty(jsonPath))
            {
                continue;
            }

            UpdateJsonProperty(jsonObj, jsonPath, node.InnerText);
        }
    }

    private static void ProcessRichTextContent(HtmlDocument doc, JObject jsonObj)
    {
        var richTextContainers = doc.DocumentNode.SelectNodes("//div[@class='rich-text-content']");
        if (richTextContainers == null)
        {
            return;
        }

        foreach (var container in richTextContainers)
        {
            var jsonPath = container.GetAttributeValue("data-json-path", string.Empty);
            if (string.IsNullOrEmpty(jsonPath))
            {
                continue;
            }

            var blocks = container.ChildNodes.Where(n => n.NodeType == HtmlNodeType.Element).ToList();
            var richTextArray = new JArray();

            foreach (var block in blocks)
            {
                var blockPath = block.GetAttributeValue("data-json-path", string.Empty);
                if (string.IsNullOrEmpty(blockPath))
                {
                    continue;
                }

                var blockJson = BuildRichTextBlock(block);
                if (blockJson != null)
                {
                    richTextArray.Add(blockJson);
                }
            }

            SetValueAtPath(jsonObj, jsonPath, richTextArray);
        }
    }

    private static JObject BuildRichTextBlock(HtmlNode blockNode)
    {
        var blockJson = new JObject();
        string blockType = GetBlockType(blockNode);
        blockJson["type"] = blockType;

        if (blockType == "heading")
        {
            int level = int.Parse(blockNode.Name.Substring(1));
            blockJson["level"] = level;
        }

        var children = new JArray();
        foreach (var childNode in blockNode.ChildNodes)
        {
            if (childNode.NodeType == HtmlNodeType.Element)
            {
                var textChild = new JObject();
                textChild["type"] = "text";
                textChild["text"] = childNode.InnerText;

                if (childNode.Name == "strong" || childNode.ParentNode.Name == "strong")
                {
                    textChild["bold"] = true;
                }

                if (childNode.Name == "em" || childNode.ParentNode.Name == "em")
                {
                    textChild["italic"] = true;
                }

                if (childNode.Name == "u" || childNode.ParentNode.Name == "u")
                {
                    textChild["underline"] = true;
                }

                children.Add(textChild);
            }
        }

        blockJson["children"] = children;
        return blockJson;
    }

    private static string GetBlockType(HtmlNode node)
    {
        return node.Name switch
        {
            var name when name.StartsWith("h") => "heading",
            "ol" => "list",
            "ul" => "list",
            "li" => "list-item",
            "pre" => "code",
            "blockquote" => "quote",
            _ => "paragraph",
        };
    }

    private static void UpdateJsonProperty(JObject json, string path, string value)
    {
        SetValueAtPath(json, path, value);
    }

    private static void SetValueAtPath(JObject json, string path, object value)
    {
        JToken valueToken = value is JToken token ? token : JToken.FromObject(value);

        var pathSegments = ParseJsonPath(path);
        if (pathSegments.Count == 0)
            return;

        JToken current = json;
        for (int i = 0; i < pathSegments.Count - 1; i++)
        {
            var segment = pathSegments[i];

            if (segment.IsArrayIndex)
            {
                if (current[segment.Name] is JArray array && array.Count > segment.Index)
                    current = array[segment.Index];
                else
                    return; 
            }
            else
            {
                if (current[segment.Name] == null)
                    return;
                current = current[segment.Name];
            }
        }

        var lastSegment = pathSegments[pathSegments.Count - 1];
        if (lastSegment.IsArrayIndex)
        {
            if (current[lastSegment.Name] is JArray array && array.Count > lastSegment.Index)
                array[lastSegment.Index] = valueToken;
        }
        else if (current is JObject obj)
        {
            obj[lastSegment.Name] = valueToken;
        }
    }

    private static List<PathSegment> ParseJsonPath(string path)
    {
        var segments = new List<PathSegment>();
        var parts = path.Split('.');

        foreach (var part in parts)
        {
            if (part.Contains("["))
            {
                var name = part.Substring(0, part.IndexOf('['));
                var indexStr = part.Substring(part.IndexOf('[') + 1, part.IndexOf(']') - part.IndexOf('[') - 1);
                if (int.TryParse(indexStr, out int index))
                {
                    segments.Add(new PathSegment(name, true, index));
                }
            }
            else
            {
                segments.Add(new PathSegment(part, false, 0));
            }
        }

        return segments;
    }

    private class PathSegment
    {
        public string Name { get; }
        public bool IsArrayIndex { get; }
        public int Index { get; }

        public PathSegment(string name, bool isArrayIndex, int index)
        {
            Name = name;
            IsArrayIndex = isArrayIndex;
            Index = index;
        }
    }
}
